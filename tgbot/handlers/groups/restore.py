from contextlib import suppress
from typing import List

from aiogram.utils.exceptions import MessageToDeleteNotFound, MessageCantBeDeleted

from tgbot.keyboards.inline import get_gran_kb
from aiogram import Dispatcher, types
from aiogram.types import ChatType

from tgbot.Utils.DBWorker import get_queue, update_data_queue


async def restore(message: types.Message, ids: List[tuple]) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –ø–æ–∑–¥—Ä. –≤ –≥—Ä—É–ø–ø—É –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤
    :param message: types.Message
    :param ids: List[tuple]
    :return: None
    """
    users_groups_ids = ids[0][0].split(',')

    for group_id in users_groups_ids:
        messages_in_queue = await get_queue(int(group_id))
        if messages_in_queue:
            for message_in_queue in messages_in_queue:
                with suppress(MessageToDeleteNotFound, MessageCantBeDeleted):
                    await message.bot.delete_message(message.chat.id, message_in_queue[1])
                text = f'üéâ ‚Äú{message_in_queue[3]}‚Äù üë§ {message_in_queue[6]} ({message_in_queue[10]}),\n' \
                       f'üî¢ {message_in_queue[7]} üïê {message_in_queue[8]}'
                new_message = await message.bot.send_message(message.chat.id, text=text,
                                                             reply_markup=get_gran_kb(uid=message_in_queue[9]))
                await update_data_queue(message_id=new_message.message_id, old_message_id=message_in_queue[1],
                                        group_id=message_in_queue[2])
        else:
            await message.answer('–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è')


def register_restore(dp: Dispatcher):
    chat_types = [ChatType.GROUP, ChatType.SUPERGROUP]
    dp.register_message_handler(restore,
                                chat_type=chat_types,
                                commands=['–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å'],
                                is_moder_group=True)
