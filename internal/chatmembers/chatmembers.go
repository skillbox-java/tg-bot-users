package chatmembers

import (
	"fmt"
	tgb "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"skbot/internal/config"
	"skbot/internal/data"
	"skbot/internal/functions"
	"skbot/pkg/logging"
	"strconv"
	"time"
)

var NewUserID int64

func WithChatMembersDo(update tgb.Update, bot *tgb.BotAPI, logger *logging.Logger, cfg *config.Config) {

	db, _ := functions.NewFuncList(cfg, logger)

	newUser := update.Message.NewChatMembers[0]
	NewUserID = newUser.ID
	chatId := update.Message.Chat.ID
	groupName := update.Message.Chat.Title
	userCount := 0

	logger.Infof("from members NewUserID %d", NewUserID)

	if !newUser.IsBot {

		moderGroupList, err := db.GetModeratorsGroup()
		if err != nil {
			logger.Error(err)
		}

		for _, group := range moderGroupList {

			if update.Message.Chat.ID == group.UserGroupID {

				count, err := bot.GetChatMembersCount(tgb.ChatMemberCountConfig{
					ChatConfig: tgb.ChatConfig{
						ChatID:             chatId,
						SuperGroupUsername: groupName,
					},
				})

				msg := tgb.NewMessage(chatId, fmt.Sprintf("–†–∞–¥—ã –≤–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å "+
					"%s! –î–∞–≤–∞–π—Ç–µ –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –Ω–∞–º –æ —Å–µ–±–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.\n"+
					"–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç? \n–ò–∑ –∫–∞–∫–æ–≥–æ –≤—ã –≥–æ—Ä–æ–¥–∞? \n–ß—Ç–æ –≤–∞—Å –ø—Ä–∏–≤–µ–ª–æ –∫ –Ω–∞–º?", newUser.FirstName))

				ans, _ := bot.Send(msg)

				go func() {

					time.Sleep(60 * time.Second)
					_, _ = bot.Send(tgb.NewDeleteMessage(chatId, ans.MessageID))
				}()
				// TODO fix count 3
				if count%cfg.Multiplicity == 0 || count%cfg.Multiplicity == 1 || count%cfg.Multiplicity == 2 || count%4 == 0 {

					err = db.AddNewJubileeUser(&newUser, count, update)
					if err != nil {
						logger.Error(err)
					}
				}

				var newCheckUser data.JubileeUser
				newUsers, err := db.GetAllJubileeUsers()
				if err != nil {
					logger.Error(err)
				}

				var congrated string

				for _, user := range newUsers {
					if int64(user.UserID) == NewUserID {
						newCheckUser = user
						userCount++
					}
				}
				if newCheckUser.Marked == 1 {
					congrated = "–£–∂–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω üëëüëëüëë"
				} else {
					congrated = "–ù–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω üéâ"
				}

				if userCount > 1 {
					msg := tgb.NewMessage(cfg.ModersGroupID.ModeratorsGroup,
						fmt.Sprintf("*–í–Ω–∏–º–∞–Ω–∏–µ!* –£ –Ω–∞—Å –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å! %s, –ù–æ *–Ω–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–≤–¥–µ–Ω–∏–µ* —Å —Ç–∞–∫–∏–º ID `%d`, "+
							"—Ä–µ–∫–æ–º–µ–Ω–¥—É—é –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–µ—Ä–µ–¥ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ–º.\n–í—ã–∑–æ–≤–∏—Ç–µ `–º–µ–Ω—é`", congrated, newCheckUser.UserID))

					msg.ParseMode = "markdown"
					_, _ = bot.Send(msg)
				}
				//TODO FIX count 3
				if count%cfg.Multiplicity == 0 || count%cfg.Multiplicity == 1 || count%cfg.Multiplicity == 2 || count%4 == 0 {

					for _, group := range moderGroupList {

						if group.ModerGroupID == cfg.ModersGroupID.ModeratorsGroup {

							text := fmt.Sprintf("üéâ¬†–í –≥—Ä—É–ø–ø—É: %s –≤—Å—Ç—É–ø–∏–ª —é–±–∏–ª–µ–π–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!\n–ò–º—è: %s "+
								"\n–ù–∏–∫: @%s, \n–ù–æ–º–µ—Ä –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è: %d. \n–í—Ä–µ–º—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è %s",
								groupName, newUser.FirstName, newUser.UserName, count,
								time.Now().Format(config.StructDateTimeFormat))
							msg := tgb.NewMessage(group.ModerGroupID, text)
							msg.ReplyMarkup = tgb.NewInlineKeyboardMarkup(
								tgb.NewInlineKeyboardRow(
									tgb.NewInlineKeyboardButtonData("–ü–æ–∑–¥—Ä–∞–≤–∏—Ç—å", "congratulation_again"+" "+strconv.Itoa(newCheckUser.ID)),
									tgb.NewInlineKeyboardButtonData("–û—Ç–∫–ª–æ–Ω–∏—Ç—å", "remove_button"),
								))

							logger.Infof("user ID %d from chatMembers", newCheckUser.ID)

							_, _ = bot.Send(msg)

						} else if update.Message.Chat.ID == group.UserGroupID {
							text := fmt.Sprintf("üéâ¬†–í –≥—Ä—É–ø–ø—É: %s –≤—Å—Ç—É–ø–∏–ª —é–±–∏–ª–µ–π–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!\n–ò–º—è: %s "+
								"\n–ù–∏–∫: @%s, \n–ù–æ–º–µ—Ä –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è: %d. \n–í—Ä–µ–º—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è %s",
								groupName, newUser.FirstName, newUser.UserName, count,
								time.Now().Format(config.StructDateTimeFormat))

							_, _ = bot.Send(tgb.NewMessage(group.ModerGroupID, text))
						}
					}
				}
			}
		}
	}
}
